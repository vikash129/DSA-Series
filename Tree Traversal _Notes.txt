Depth First Traversals: 
(a) Inorder (Left, Root, Right) : 4 2 5 1 3 
(b) Preorder (Root, Left, Right) : 1 2 4 5 3 
(c) Postorder (Left, Right, Root) : 4 5 2 3 1
Breadth-First or Level Order Traversal: 1 2 3 4 5 
Please see this post for Breadth-First Traversal.

Inorder Traversal (Practice): 

Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
Uses of Inorder 
In the case of binary search trees (BST), Inorder traversal gives nodes in non-decreasing order. To get nodes of BST in non-increasing order, a variation of Inorder traversal where Inorder traversal s reversed can be used. 
Example: In order traversal for the above-given figure is 4 2 5 1 3


Preorder Traversal (Practice): 

Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree) 
Uses of Preorder 
Preorder traversal is used to create a copy of the tree. Preorder traversal is also used to get prefix expression on an expression tree. Please see http://en.wikipedia.org/wiki/Polish_notation know why prefix expressions are useful. 
Example: Preorder traversal for the above-given figure is 1 2 4 5 3.

Postorder Traversal (Practice): 

Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.



Stack
Queue
Binary Tree
Binary Tree | Set 1 (Introduction)
Binary Tree | Set 2 (Properties)
Binary Tree | Set 3 (Types of Binary Tree)
Tree Traversals (Inorder, Preorder and Postorder)
Inorder Tree Traversal without Recursion
Inorder Tree Traversal without recursion and without stack!
Construct Tree from given Inorder and Preorder traversals
Construct a tree from Inorder and Level order traversals | Set 1
Construct Complete Binary Tree from its Linked List Representation
Binary Search Tree
Heap
Hashing
Graph
Matrix
Advanced Data Structure

Tree Traversals (Inorder, Preorder and Postorder)
Difficulty Level : Easy
Last Updated : 30 Nov, 2021
Unlike linear data structures (Array, Linked List, Queues, Stacks, etc) which have only one logical way to traverse them, trees can be traversed in different ways. Following are the generally used ways for traversing trees.

Example Tree

Depth First Traversals: 
(a) Inorder (Left, Root, Right) : 4 2 5 1 3 
(b) Preorder (Root, Left, Right) : 1 2 4 5 3 
(c) Postorder (Left, Right, Root) : 4 5 2 3 1
Breadth-First or Level Order Traversal: 1 2 3 4 5 
Please see this post for Breadth-First Traversal.

Inorder Traversal (Practice): 

Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
Uses of Inorder 
In the case of binary search trees (BST), Inorder traversal gives nodes in non-decreasing order. To get nodes of BST in non-increasing order, a variation of Inorder traversal where Inorder traversal s reversed can be used. 
Example: In order traversal for the above-given figure is 4 2 5 1 3.

Preorder Traversal (Practice): 

Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree) 
Uses of Preorder 
Preorder traversal is used to create a copy of the tree. Preorder traversal is also used to get prefix expression on an expression tree. Please see http://en.wikipedia.org/wiki/Polish_notation know why prefix expressions are useful. 
Example: Preorder traversal for the above-given figure is 1 2 4 5 3.

Postorder Traversal (Practice): 

Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.
Uses of Postorder 
Postorder traversal is used to delete the tree. Please see the question for the deletion of a tree for details.
Postorder traversal is also useful to get the postfix expression of an expression tree.
