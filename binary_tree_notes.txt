Trees: Unlike Arrays, Linked Lists, Stack and queues, which are linear data structures, trees are hierarchical data structures.
Tree Vocabulary: The topmost node is called root of the tree. The elements that are directly under an element are called its children. The element directly above something is called its parent. For example, ‘a’ is a child of ‘f’, and ‘f’ is the parent of ‘a’. Finally, elements with no children are called leaves. 

Why Trees? 
1. One reason to use trees might be because you want to store information that naturally forms a hierarchy. For example, the file system on a computer:



. Trees (with some ordering e.g., BST) provide moderate access/search (quicker than Linked List and slower than arrays). 
3. Trees provide moderate insertion/deletion (quicker than Arrays and slower than Unordered Linked Lists). 
4. Like Linked Lists and unlike Arrays, Trees don’t have an upper limit on number of nodes as nodes are linked using pointers.
Main applications of trees include: 
1. Manipulate hierarchical data. 
2. Make information easy to search (see tree traversal). 
3. Manipulate sorted lists of data. 
4. As a workflow for compositing digital images for visual effects. 
5. Router algorithms 
6. Form of a multi-stage decision-making (see business chess). 
Binary Tree: A tree whose elements have at most 2 children is called a binary tree. Since each element in a binary tree can have only 2 children, we typically name them the left and right child. 
Binary Tree Representation: A tree is represented by a pointer to the topmost node in tree. If the tree is empty, then value of root is NULL. 
A Tree node contains following parts. 
1. Data 
2. Pointer to left child 
3. Pointer to right child
------------------------------------------------------------------------------------------------------------------

1) The maximum number of nodes at level ‘l’ of a binary tree is 2l. 
Here level is the number of nodes on the path from the root to the node (including root and node). Level of the root is 0. 
This can be proved by induction. 
For root, l = 0, number of nodes = 20 = 1 
Assume that the maximum number of nodes on level ‘l’ is 2l 
Since in Binary tree every node has at most 2 children, next level would have twice nodes, i.e. 2 * 2l 

2) The Maximum number of nodes in a binary tree of height ‘h’ is 2h – 1. 
Here the height of a tree is the maximum number of nodes on the root to leaf path. Height of a tree with a single node is considered as 1. 
This result can be derived from point 2 above. A tree has maximum nodes if all levels have maximum nodes. So maximum number of nodes in a binary tree of height h is 1 + 2 + 4 + .. + 2h-1. This is a simple geometric series with h terms and sum of this series is 2h– 1. 
In some books, the height of the root is considered as 0. In this convention, the above formula becomes 2h+1 – 1 

3) In a Binary Tree with N nodes, minimum possible height or the minimum number of levels is Log2(N+1).
This can be directly derived from point 2 above. If we consider the convention where the height of a root node is considered as 0, then above formula for minimum possible height becomes | Log2(N+1) | – 1 

4) A Binary Tree with L leaves has at least | Log2L |+ 1   levels. 
A Binary tree has the maximum number of leaves (and a minimum number of levels) when all levels are fully filled. Let all leaves be at level l, then below is true for the number of leaves L. 

L   <=  2l-1  [From Point 1]
l =   | Log2L | + 1 
where l is the minimum number of levels.
5) In Binary tree where every node has 0 or 2 children, the number of leaf nodes is always one more than nodes with two children.

-----------------------------------------------------------------------------------------------

####### Types of Binary Trees.


1. Full Binary Tree A Binary Tree is a full binary tree if every node has 0 or 2 children. The following are the examples of a full binary tree. We can also say a full binary tree is a binary tree in which all nodes except leaf nodes have two children. 


2. Complete Binary Tree: A Binary Tree is a Complete Binary Tree if all the levels are completely filled except possibly the last level and the last level has all keys as left as possible 


3. Perfect Binary Tree A Binary tree is a Perfect Binary Tree in which all the internal nodes have two children and all leaf nodes are at the same level. 
The following are the examples of Perfect Binary Trees. 

In a Perfect Binary Tree, the number of leaf nodes is the number of internal nodes plus 1   

 L = I + 1 Where L = Number of leaf nodes, I = Number of internal nodes.

A Perfect Binary Tree of height h (where the height of the binary tree is the number of edges in the longest path from the root node to any leaf node in the tree, height of root node is 0) has 2h+1 – 1 node. 

An example of a Perfect binary tree is ancestors in the family. Keep a person at root, parents as children, parents of parents as their children. 


4.Balanced Binary Tree 

Balanced Binary Tree 
A binary tree is balanced if the height of the tree is O(Log n) where n is the number of nodes.
For Example, the AVL tree maintains O(Log n) height by making sure that the difference between the heights of the left and right subtrees is at most 1.
Red-Black trees maintain O(Log n) height by making sure that the number of Black nodes on every root to leaf paths is the same and there are no adjacent red nodes. Balanced Binary Search trees are performance-wise good as they provide O(log n) time for search, insert and delete. 
A binary tree is balanced if the height of the tree is O(Log n) where n is the number of nodes. For Example, the AVL tree maintains O(Log n) height by making sure that
the difference between the heights of the left and right subtrees is at most 1. Red-Black trees maintain O(Log n) height by making sure that the number of Black nodes 
on every root to leaf paths is the same and there are no adjacent red nodes. Balanced Binary Search trees are performance-wise good as they provide O(log n) time for
search, insert and delete. 


5.A degenerate (or pathological) tree A Tree where every internal node has one child. Such trees are performance-wise same as linked list. 
5.A degenerate (or pathological) tree A Tree where every internal node has one child. Such trees are performance-wise same as linked list. 
